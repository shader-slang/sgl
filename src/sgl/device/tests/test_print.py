# SPDX-License-Identifier: Apache-2.0

import pytest
import sys
import sgl
from pathlib import Path

sys.path.append(str(Path(__file__).parent))
import sglhelpers as helpers


@pytest.mark.parametrize("device_type", helpers.DEFAULT_DEVICE_TYPES)
def test_print(device_type: sgl.DeviceType):
    if device_type == sgl.DeviceType.metal:
        pytest.skip("Slang bug https://github.com/shader-slang/slang/issues/6764")
    device = sgl.Device(type=device_type, enable_print=True)
    helpers.dispatch_compute(
        device=device,
        path=Path(__file__).parent / "test_print.slang",
        entry_point="compute_main",
        thread_count=[1, 1, 1],
    )
    result = device.flush_print_to_string()
    # print("result:", result)
    expected = {
        sgl.DeviceType.d3d12: """Hello World!
0
01
012
0123
01234
012345
0123456
01234567
bool: false=false, true=true
int8: min=-128, max=127, -123=-123, 123=123
int16: min=-32768, max=32767, -12345=-12345, 12345=12345
int32: min=-2147483648, max=2147483647, -12345=-12345, 12345=12345
int64: min=-9223372036854775808, max=9223372036854775807, -12345=-12345, 12345=12345
uint8: min=0, max=255, 0=0, 123=123
uint16: min=0, max=65535, 12345=12345, 23456=23456
uint32: min=0, max=4294967295, 12345=12345, 23456=23456
uint64: min=0, max=18446744073709551615, 12345=12345, 23456=23456
float16: min=-65504, max=65504, -123.45=-123.44, 123.45=123.44
float32: min=-3.4028235e+38, max=3.4028235e+38, -123.45=-123.45, 123.45=123.45
float64: min=-1.7976931348623157e+308, max=1.7976931348623157e+308, -123.45=-123.45, 123.45=123.45
int16_tX: {-4000, -3000} {-2000, -1000, 0} {1000, 2000, 3000, 4000}
int32_tX: {-400000000, -300000000} {-200000000, -100000000, 0} {100000000, 200000000, 300000000, 400000000}
int64_tX: {-40000000000000, -30000000000000} {-20000000000000, -10000000000000, 0} {10000000000000, 20000000000000, 30000000000000, 40000000000000}
uint16_tX: {1000, 2000} {3000, 4000, 5000} {6000, 7000, 8000, 9000}
uint32_tX: {100000000, 200000000} {300000000, 400000000, 500000000} {600000000, 700000000, 800000000, 900000000}
uint64_tX: {10000000000000, 20000000000000} {30000000000000, 40000000000000, 50000000000000} {60000000000000, 70000000000000, 80000000000000, 90000000000000}
float16_tX: {-400, -300} {-200, -100, 0} {100, 200, 300, 400}
float32_tX: {-4000000, -3000000} {-2000000, -1000000, 0} {1000000, 2000000, 3000000, 4000000}
float64_tX: {999999995904, 1999999991808} {2999999987712, 3999999983616, 4999999979520} {5999999975424, 6999999971328, 7999999967232, 8999999963136}
uint3x4: {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}
uint4x4: {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}
uint4x3: {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10, 11, 12}}
float3x3: {{-4.00, -3.00, -1.00}, {+0.00, +1.00, +2.00}, {+3.00, +4.00, +5.00}}
""",
        sgl.DeviceType.vulkan: """Hello World!
0
01
012
0123
01234
012345
0123456
01234567
bool: false=false, true=true
int8: min=-128, max=127, -123=-123, 123=123
int16: min=-32768, max=32767, -12345=-12345, 12345=12345
int32: min=-2147483648, max=2147483647, -12345=-12345, 12345=12345
int64: min=-9223372036854775808, max=9223372036854775807, -12345=-12345, 12345=12345
uint8: min=0, max=255, 0=0, 123=123
uint16: min=0, max=65535, 12345=12345, 23456=23456
uint32: min=0, max=4294967295, 12345=12345, 23456=23456
uint64: min=0, max=18446744073709551615, 12345=12345, 23456=23456
float16: min=-65504, max=65504, -123.45=-123.44, 123.45=123.44
float32: min=-3.4028235e+38, max=3.4028235e+38, -123.45=-123.45, 123.45=123.45
float64: min=-1.7976931348623157e+308, max=1.7976931348623157e+308, -123.45=-123.45, 123.45=123.45
int8_tX: {-4, -3} {-2, -1, 0} {1, 2, 3, 4}
int16_tX: {-4000, -3000} {-2000, -1000, 0} {1000, 2000, 3000, 4000}
int32_tX: {-400000000, -300000000} {-200000000, -100000000, 0} {100000000, 200000000, 300000000, 400000000}
int64_tX: {-40000000000000, -30000000000000} {-20000000000000, -10000000000000, 0} {10000000000000, 20000000000000, 30000000000000, 40000000000000}
uint8_tX: {1, 2} {3, 4, 5} {6, 7, 8, 9}
uint16_tX: {1000, 2000} {3000, 4000, 5000} {6000, 7000, 8000, 9000}
uint32_tX: {100000000, 200000000} {300000000, 400000000, 500000000} {600000000, 700000000, 800000000, 900000000}
uint64_tX: {10000000000000, 20000000000000} {30000000000000, 40000000000000, 50000000000000} {60000000000000, 70000000000000, 80000000000000, 90000000000000}
float16_tX: {-400, -300} {-200, -100, 0} {100, 200, 300, 400}
float32_tX: {-4000000, -3000000} {-2000000, -1000000, 0} {1000000, 2000000, 3000000, 4000000}
float64_tX: {999999995904, 1999999991808} {2999999987712, 3999999983616, 4999999979520} {5999999975424, 6999999971328, 7999999967232, 8999999963136}
float3x3: {{-4.00, -3.00, -1.00}, {+0.00, +1.00, +2.00}, {+3.00, +4.00, +5.00}}
""",
        sgl.DeviceType.metal: """TODO
""",
        sgl.DeviceType.cuda: """Hello World!
0
01
012
0123
01234
012345
0123456
01234567
bool: false=false, true=true
int8: min=-128, max=127, -123=-123, 123=123
int16: min=-32768, max=32767, -12345=-12345, 12345=12345
int32: min=-2147483648, max=2147483647, -12345=-12345, 12345=12345
int64: min=-9223372036854775808, max=9223372036854775807, -12345=-12345, 12345=12345
uint8: min=0, max=255, 0=0, 123=123
uint16: min=0, max=65535, 12345=12345, 23456=23456
uint32: min=0, max=4294967295, 12345=12345, 23456=23456
uint64: min=0, max=18446744073709551615, 12345=12345, 23456=23456
float16: min=-65504, max=65504, -123.45=-123.44, 123.45=123.44
float32: min=-3.4028235e+38, max=3.4028235e+38, -123.45=-123.45, 123.45=123.45
float64: min=-1.7976931348623157e+308, max=1.7976931348623157e+308, -123.45=-123.45, 123.45=123.45
int8_tX: {-4, -3} {-2, -1, 0} {1, 2, 3, 4}
int16_tX: {-4000, -3000} {-2000, -1000, 0} {1000, 2000, 3000, 4000}
int32_tX: {-400000000, -300000000} {-200000000, -100000000, 0} {100000000, 200000000, 300000000, 400000000}
int64_tX: {-40000000000000, -30000000000000} {-20000000000000, -10000000000000, 0} {10000000000000, 20000000000000, 30000000000000, 40000000000000}
uint8_tX: {1, 2} {3, 4, 5} {6, 7, 8, 9}
uint16_tX: {1000, 2000} {3000, 4000, 5000} {6000, 7000, 8000, 9000}
uint32_tX: {100000000, 200000000} {300000000, 400000000, 500000000} {600000000, 700000000, 800000000, 900000000}
uint64_tX: {10000000000000, 20000000000000} {30000000000000, 40000000000000, 50000000000000} {60000000000000, 70000000000000, 80000000000000, 90000000000000}
float16_tX: {-384, -256} {-192, -96, 0} {102.25, 217, 319.75, 447.75}
float32_tX: {-4000000, -3000000} {-2000000, -1000000, 0} {1000000, 2000000, 3000000, 4000000}
float64_tX: {999999995904, 1999999991808} {2999999987712, 3999999983616, 4999999979520} {5999999975424, 6999999971328, 7999999967232, 8999999963136}
uint3x4: {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}
uint4x4: {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}
uint4x3: {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10, 11, 12}}
float3x3: {{-4.00, -3.00, -1.00}, {+0.00, +1.00, +2.00}, {+3.00, +4.00, +5.00}}
""",
    }

    assert result == expected[device_type]


if __name__ == "__main__":
    pytest.main([__file__, "-vvvs"])
