name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  job:
    name: ${{ matrix.os }} / ${{ matrix.preset }} / ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        config: [Debug, Release]
        include:
          - os: windows-latest
            preset: windows-msvc
            cmake: tools/host/cmake/bin/cmake.exe
          - os: ubuntu-latest
            preset: linux-gcc
            cmake: tools/host/cmake/bin/cmake
          - os: macos-latest
            preset: macos-x64-clang
            cmake: tools/host/cmake/CMake.app/Contents/bin/cmake

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Install MSVC.
      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1

      # Install CUDA.
      # - name: Install CUDA
      #   if: ${{ ! startsWith(matrix.os, 'macos') }}
      #   uses: Jimver/cuda-toolkit@v0.2.14
      #   id: cuda-toolkit
      #   with:
      #     cuda: '12.3.2'
      #     sub-packages: '["nvcc", "cudart"]'
      #     method: 'network'

      # Setup for Windows.
      - name: Setup (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: cmd
        run: |
          setup.bat

      # Setup for Linux.
      - name: Setup (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          ./setup.sh
          sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

      # Setup for macOS.
      - name: Setup (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        shell: bash
        run: |
          ./setup.sh

      # Setup vcpkg caching.
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      # Configure.
      - name: Configure
        run: ${{matrix.cmake}} --preset ${{matrix.preset}}

      # Build.
      - name: Build
        run: ${{matrix.cmake}} --build build/${{matrix.preset}}
